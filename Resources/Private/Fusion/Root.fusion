#
# Add the paginator's "current page" value to cache entry identifiers.
#
#prototype(Neos.Fusion:GlobalCacheIdentifiers).blogPostsPaginatorCurrentPage = ${request.pluginArguments.posts-paginator.currentPage}

#
# Blog Post is rendered by a Template-based TypoScript object which contains some
# properties on its own (title, ...) and renders sub nodes contained in two
# separate sections, namely "main" for the actual post content and "comments" for
# the comment nodes.
#
# The blog post content is made of several content elements which are rendered
# as a collection just like a page would render its content elements. Hence the
# usage of ContentCollection.
#
# The blog post comments are just several Text nodes which are as well rendered
# through the TypoScript collection feature.
#
prototype(MIWeb.Neos.Blog:Post) < prototype(Neos.NodeTypes:Page) {
    body.content.main = MIWeb.Neos.Blog:PostRenderer
}

prototype(MIWeb.Neos.Blog:PostRenderer) < prototype(Neos.Fusion:Template) {
    templatePath = 'resource://MIWeb.Neos.Blog/Private/Templates/NodeTypes/Post.html'
    node = ${node}
    title = ${q(node).property('title')}
    author = ${q(node).property('author')}
    datePublished = ${q(node).property('datePublished')}

    # Render the main ContentCollection of the Post like a page would
    main = Neos.Neos:ContentCollection {
        nodePath = 'main'
    }

    # Render an additional ContentCollection for comments
    #comments = Neos.Neos:ContentCollection {
    #    nodePath = 'comments'
    #}

    #numberOfComments = ${q(node).children('comments').children('[spam = false]').count()}

    #@cache {
        #mode = 'cached'
        #entryIdentifier {
            #node = ${node}
            #content = 'blogpost'
        #}
        #entryTags {
            #1 = ${'Node_' + node.identifier}
            #2 = ${'DescendantOf_' + q(node).find('main').property('_identifier')}
            #3 = ${'DescendantOf_' + q(node).find('comments').property('_identifier')}
        #}
    #}
}

#
# List of most recent blog posts, including pagination
#
prototype(MIWeb.Neos.Blog:PostsOverview) < prototype(Neos.Neos:Content) {
    postsNode = ${q(node).closest('[instanceof Neos.Neos:Document]').get(0)}
    currentPage = ${request.pluginArguments.posts-paginator.currentPage}

    #@cache {
        #mode = 'cached'
        #entryIdentifier {
            #documentNode = ${node}
            #currentPage = ${request.pluginArguments.posts-paginator.currentPage}
        #}
        #entryTags {
            #1 = ${'Node_' + node.identifier}
            #2 = ${'DescendantOf_' + q(node).property('_identifier')}
        #}
    #}
}

#
# RSS feed
#
#prototype(MIWeb.Neos.Blog:Feed) < prototype(Neos.Neos:Plugin) {
    #package = 'MIWeb.Neos.Blog'
    #controller = 'Post'
    #action = 'rss'

    #postsNode = ${q(documentNode).parent().get(0)}

    #feedTitle = ${Configuration.setting('RobertLemke.Plugin.Blog.feed.title')}
    #feedDescription = ${Configuration.setting('RobertLemke.Plugin.Blog.feed.description')}
    #feedUri = ${Configuration.setting('RobertLemke.Plugin.Blog.feed.uri')}
    #includeContent = ${Configuration.setting('RobertLemke.Plugin.Blog.feed.includeContent')}
#}

prototype(MIWeb.Neos.Blog:Quote) < prototype(Neos.Neos:Content)
